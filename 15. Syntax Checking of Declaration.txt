15. Syntax Checking of Declaration Statement using LEX and YACC


lex
%{
#include "parser.tab.h"
%}

%%
int     { return INT; }
float   { return FLOAT; }
[a-zA-Z][a-zA-Z0-9]*  { return ID; }
;       { return SEMICOLON; }
[ \t\n] ;
.       { printf("Invalid character: %s\n", yytext); }
%%

int yywrap(){
   return 1;
}

yacc
%{
#include <stdio.h>
#include <stdlib.h>
void yyerror(const char *s);
int yylex();
extern FILE* yyin;
%}

%token INT FLOAT ID SEMICOLON

%%

program:
    | program statement
    ;

statement: 
    type ID SEMICOLON { printf("Valid declaration statement\n"); }
    ;

type: 
    INT { printf("Type: int\n"); }
    | FLOAT { printf("Type: float\n"); }
    ;

%%

void yyerror(const char *s) {
    printf("Syntax Error: %s\n", s);
}

int main(int argc, char* argv[]) {
    if (argc > 1) {
        yyin = fopen(argv[1], "r");
        if (!yyin) {
            printf("Cannot open file %s\n", argv[1]);
            return 1;
        }
    } else {
        printf("Enter declaration statements (Ctrl+D to end):\n");
        yyin = stdin;
    }
    
    yyparse();
    
    if (argc > 1)
        fclose(yyin);
    
    return 0;
}
