5.  Syntax Checking of Declaration Statement using LEX and YACC

lex.l

%{
#include "y.tab.h" // Include the header file generated by Yacc/Bison
%}

%%

"int"               { return INT; }          // Recognize 'int'
"float"             { return FLOAT; }        // Recognize 'float'
[a-zA-Z][a-zA-Z0-9]* { return ID; }           // Recognize identifiers
";"                 { return SEMICOLON; }    // Recognize semicolon
[ \t\n]+            { /* Ignore whitespace */ } // Ignore spaces, tabs, newlines
.                   { printf("Invalid character: %s\n", yytext); } // Catch-all for invalid characters

%%

int yywrap() {
    return 1;
}
---------------------------------------------------------------------------------------------------------
yacc.y

%{
#include <stdio.h>
#include <stdlib.h>

void yyerror(const char *s); // Error reporting function
int yylex(); // Declaration for the lexer
%}

/* Token declarations */
%token INT FLOAT ID SEMICOLON

%%

statement:
    type ID SEMICOLON {
        printf("Valid declaration statement\n");
    }
;

type:
    INT
    | FLOAT
;

%%

void yyerror(const char *s) {
    fprintf(stderr, "Syntax Error: %s\n", s);
}

int main() {
    printf("Enter a declaration statement: \n");
    yyparse();
    return 0;
}

----------------------------------------------------------------------------------------------------------

Compilation & Execution Commands:
yacc -d yacc.y
lex lex.l
gcc lex.yy.c y.tab.c -o syntax_checker
./syntax_checker
Sample Input/Output:
Input: int a;
Output: Valid declaration statement
Input: char b;
Output: Syntax Error
