17.Intermediate Code Generation (ICG) using LEX and YACC

lex
%{
#include "parser.tab.h" // Include tokens from Bison
#include <string.h>
%}
%%
[a-zA-Z_][a-zA-Z0-9_]*    { yylval.str = strdup(yytext); return ID; }     // Identifiers
[0-9]+                    { yylval.str = strdup(yytext); return NUMBER; } // Numbers
"="                       { return '='; }                                 // Assignment
"+"                       { return '+'; }                                 // Addition
"-"                       { return '-'; }                                 // Subtraction
"*"                       { return '*'; }                                 // Multiplication
"/"                       { return '/'; }                                 // Division
"("                       { return '('; }                                 // Left parenthesis
")"                       { return ')'; }                                 // Right parenthesis
[ \t\n]                   ;                                               // Ignore whitespace
.                         { printf("Invalid character: %c\n", yytext[0]); }
%%
int yywrap() {
    return 1;
}


yacc
%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int tempVarCount = 1;

void printICG(const char* result, const char* op1, const char* op, const char* op2) {
    if (op2[0] == '\0') {
        printf("%s = %s\n", result, op1);
    } else {
        printf("%s = %s %s %s\n", result, op1, op, op2);
    }
}

char* newTemp() {
    char* temp = (char*)malloc(10);
    sprintf(temp, "t%d", tempVarCount++);
    return temp;
}

int yylex();
void yyerror(const char* s) {
    fprintf(stderr, "Error: %s\n", s);
}
%}

%union {
    char* str;
}

%token <str> ID NUMBER
%type <str> expr term factor

%%
program:
    stmt    { printf("Parsing completed successfully.\n"); YYACCEPT; }
    ;

stmt:
    ID '=' expr      { printICG($1, $3, "=", ""); }
    ;

expr:
    expr '+' term    { char* t = newTemp(); printICG(t, $1, "+", $3); $$ = t; }
    | expr '-' term  { char* t = newTemp(); printICG(t, $1, "-", $3); $$ = t; }
    | term           { $$ = $1; }
    ;

term:
    term '*' factor  { char* t = newTemp(); printICG(t, $1, "*", $3); $$ = t; }
    | term '/' factor { char* t = newTemp(); printICG(t, $1, "/", $3); $$ = t; }
    | factor         { $$ = $1; }
    ;

factor:
    '(' expr ')'     { $$ = $2; }
    | ID             { $$ = $1; }
    | NUMBER         { $$ = $1; }
    ;
%%

int main() {
    printf("Enter an expression (example: a = b + c * (d - e)):\n");
    yyparse();
    return 0;
}