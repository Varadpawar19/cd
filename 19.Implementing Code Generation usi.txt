19.Implementing Code Generation using LEX and YACC(Three Address Code)

lex
%{
#include "y.tab.h"
#include <string.h>
#include <stdlib.h>
%}

%%
[ \t\n]                 ; // Skip whitespace
[a-zA-Z_][a-zA-Z0-9_]*  { yylval.str = strdup(yytext); return ID; }
[0-9]+                 { yylval.str = strdup(yytext); return NUM; }
"="                    { return '='; }
";"                    { return ';'; }
"+"                    { return '+'; }
"-"                    { return '-'; }
"*"                    { return '*'; }
"/"                    { return '/'; }
.                      { return yytext[0]; }
%%


int yywrap() {return 1;}


yacc
%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int yylex(void);
void yyerror(const char *s);

int tempCount = 0;
char temp[10];

char* newTemp() {
    sprintf(temp, "t%d", tempCount++);
    return strdup(temp);
}

void generateCode(const char* result, const char* arg1, const char* op, const char* arg2) {
    if (op[0] == '\0') {
        printf("%s = %s\n", result, arg1);
    } else {
        printf("%s = %s %s %s\n", result, arg1, op, arg2);
    }
}
%}

%left '+' '-'
%left '*' '/'
%right '='


%union {
    char* str;
}

%token <str> ID NUM
%type <str> expr

%%

stmt: ID '=' expr ';'  { generateCode($1, $3, "", ""); }
    ;

expr: expr '+' expr  { char* t = newTemp(); generateCode(t, $1, "+", $3); $$ = t; }
    | expr '-' expr  { char* t = newTemp(); generateCode(t, $1, "-", $3); $$ = t; }
    | expr '*' expr  { char* t = newTemp(); generateCode(t, $1, "*", $3); $$ = t; }
    | expr '/' expr  { char* t = newTemp(); generateCode(t, $1, "/", $3); $$ = t; }
    | ID             { $$ = $1; }
    | NUM            { $$ = $1; }
    ;

%%

void yyerror(const char* s) {
    fprintf(stderr, "Error: %s\n", s);
}

int main() {
    printf("Enter an arithmetic expression:\n");
    return yyparse();
}

