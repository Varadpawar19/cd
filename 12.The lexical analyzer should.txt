12.The lexical analyzer should
 ignore redundant spaces, tabs and new lines. It should also ignore comments

%{
#include <stdio.h>
#include <stdlib.h>
%}

%%

[ \t\n]+ ;

"//".* ;

"/*"([^*]*\*+)*([^/*][^*]*\*+)*"/" ;

"int"|"float"|"char"|"if"|"else"|"while"|"return" { printf("Keyword: %s\n", yytext); }

[a-zA-Z_][a-zA-Z0-9_]{0,29} { printf("Identifier: %s\n", yytext); }

[0-9]+(\.[0-9]+)? { printf("Number: %s\n", yytext); }

("=="|"!="|"<="|">="|"<"|">"|"="|"+"|"-"|"*"|"/") { printf("Operator: %s\n", yytext); }

[\(\)\{\}\[\];,] { printf("Delimiter: %s\n", yytext); }

. ;

%%

int main(int argc, char **argv) {
 if (argc < 2) {
   fprintf(stderr, "Usage: %s <input file>\n", argv[0]);
   exit(1);
 }
 FILE *input_file = fopen(argv[1], "r");
 if (!input_file) {
   perror("Failed to open file");
   exit(1);
 }
 yyin = input_file;
 yylex();
 fclose(input_file);
 return 0;
}

int yywrap() {
  return 1;
}
