9.  Implementing Code Generation using LEX and YACC

codegen.l

%{
#include "y.tab.h" // Include YACC-generated header file
%}
%%
[a-zA-Z][a-zA-Z0-9]* { yylval = strdup(yytext); return ID; } // Recognize
identifiers
[0-9]+ { yylval = atoi(yytext); return NUMBER; } // Recognize integers
[\+\-\*/\(\)=] { return yytext[0]; } // Recognize operators and parentheses
[ \t] ; // Ignore spaces and tabs
. { printf("Invalid character: %s\n", yytext); } // Handle invalid characters
%%
int yywrap() { return 1; } // Indicate end of input

------------------------------------------------------------------------------------------------------------

codegen.y

%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int tempVarCount = 0; // Counter for temporary variables
void generateCode(char*, char*, char*, char*);
%}
%token ID NUMBER
%%
stmt: expr '=' expr { generateCode($2, $1, "=", ""); } // Assignment statement
 ;
expr: expr '+' term { $$ = (char*)malloc(10); sprintf($$, "t%d",
tempVarCount++); generateCode($$, $1, "+", $3); }
 | expr '-' term { $$ = (char*)malloc(10); sprintf($$, "t%d",
tempVarCount++); generateCode($$, $1, "-", $3); }
 | term { $$ = $1; }
 ;
term: term '*' factor { $$ = (char*)malloc(10); sprintf($$, "t%d",
tempVarCount++); generateCode($$, $1, "*", $3); }
 | term '/' factor { $$ = (char*)malloc(10); sprintf($$, "t%d",
tempVarCount++); generateCode($$, $1, "/", $3); }
 | factor { $$ = $1; }
 ;
factor: '(' expr ')' { $$ = $2; }
 | ID { $$ = strdup(yytext); }
 | NUMBER { $$ = strdup(yytext); }
 ;
%%
void generateCode(char* result, char* op1, char* op, char* op2) {
 printf("%s = %s %s %s\n", result, op1, op, op2);
}
int main() {
 printf("Enter an arithmetic expression:\n");
 yyparse();
 return 0;
}
int yyerror(const char *msg) {
 fprintf(stderr, "Error: %s\n", msg);
 return 0;
}

-----------------------------------------------------------------------------------------------------------

Compilation and Execution:
1. Compile the YACC file:
yacc -d codegen.y
2. Compile the LEX file:
lex codegen.l
3. Compile both outputs with GCC:
gcc lex.yy.c y.tab.c -o codegen -ll -ly
4. Run the program:
./codegen
5. Enter an arithmetic expression like x = a + b * c and observe the generated
intermediate code.
Expected Output Example:
Enter an arithmetic expression:
x = a + b * c
t0 = b * c
t1 = a + t0
x = t1
