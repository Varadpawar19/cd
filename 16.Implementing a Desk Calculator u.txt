16.Implementing a Desk Calculator using LEX and YACC

lex
%{
#include "parser.tab.h"
%}

%%
[0-9]+      { yylval = atoi(yytext); return NUMBER; }
[+\-*/()]   { return yytext[0]; }
[ \t]       ; /* ignore whitespace */
\n          { return '\n'; }
.           { printf("Invalid char: %c\n", yytext[0]); }
%%

int yywrap() { return 1; }


yacc
%{
#include <stdio.h>
#include <stdlib.h>
int yylex(void);
void yyerror(const char *s) { fprintf(stderr, "Error: %s\n", s); }
%}

%token NUMBER
%left '+' '-'
%left '*' '/'

%%
input:    /* empty */
        | input line
        ;

line:    expr '\n' { printf("=%d\n", $1); printf("Enter arithmetic expression\n"); }
        ;

expr:    NUMBER       { $$ = $1; }
        | expr '+' expr { $$ = $1 + $3; }
        | expr '-' expr { $$ = $1 - $3; }
        | expr '*' expr { $$ = $1 * $3; }
        | expr '/' expr { $$ = $1 / $3; }
        | '(' expr ')' { $$ = $2; }
        ;
%%

int main() {
    printf("Enter arithmetic expression\n");
    yyparse();
    return 0;
}
